@page "/repository/{RepositoryAuthor}/{RepositoryName}"
@using ServerFrontEnd.ViewModel

@inject RepositoryStorage _RepositoryStorage
<RepositoryComponent RepositoryUrl="@origin"></RepositoryComponent>
<CloningComponent Origin="@origin"></CloningComponent>
<ReleasesComponent Origin="@origin"></ReleasesComponent>
<HistoryComponent Origin="@origin"></HistoryComponent>
<ReleasesCloningComponent Origin="@origin"></ReleasesCloningComponent>
<CompileComponent Origin="@origin"></CompileComponent>
<DetectComponent Origin="@origin"></DetectComponent>
<MetricsComponent Origin="@origin"></MetricsComponent>
<ReleasesDeleterComponent Origin="@origin"></ReleasesDeleterComponent>

@code {
    [Parameter]
    public String RepositoryAuthor { get; set; }
    
    [Parameter]
    public String RepositoryName { get; set; }

    public String origin;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        origin = $"https://github.com/{RepositoryAuthor}/{RepositoryName}.git";
        _RepositoryStorage.OnChange += OnMyChangeHandler;

    }

    protected void Dispose()
    {
        _RepositoryStorage.OnChange -= OnMyChangeHandler;
    }

    
    private async void OnMyChangeHandler()
    {
    // InvokeAsync is inherited, it syncs the call back to the render thread
       await InvokeAsync(StateHasChanged);
    }
    

}