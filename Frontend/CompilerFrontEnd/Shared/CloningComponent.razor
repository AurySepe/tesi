@using CompilerFrontEnd.Model
@using CompilerFrontEnd.OperationManager
@using CompilerFrontEnd.Services.RepositoryExtensions
@using CompilerFrontEnd.ViewModel
@inject RepositoryStorage _RepositoryStorage
@inject OperationManager OperationManager

<div class="d-flex w-100 justify-content-between">
    <h1>Clone</h1>
    @if (repo.Cloning().State == RepositoryOperation.SUCCEDED)
    {
        <h5 class="mb-1">la repository è stata clonata in @repo.Cloning().Data.ResultName</h5>

        <p class="mb-1">@repo.Cloning().Result</p>
    }
    else if (repo.Cloning().State == RepositoryOperation.PENDING)
    {
        <h5 class="mb-1">Sta lavorando</h5>
    }
    else if (repo.Cloning().State == RepositoryOperation.FAILED)
    {
        <h5 class="mb-1">La clonazione ha fallito</h5>
    }
    else if (repo.Cloning().State == RepositoryOperation.CREATED)
    {
        <button type="button" class="btn btn-primary" @onclick="clone">Clone</button>
    }
    else if (repo.Cloning().State == RepositoryOperation.READY)
    {
        <h5 class="mb-1">sta aspettando la fine di un altra operazione</h5>
    }
</div>
@code {
    [Parameter]
    public String Origin { get; set; }

    Repository repo;

    protected override void OnInitialized()
    {
        repo = _RepositoryStorage.Items[Origin];
        _RepositoryStorage.OnChange += StateHasChanged;
    }

    protected void Dispose()
    {
        _RepositoryStorage.OnChange -= StateHasChanged;
    }

    public void clone()
    {
        OperationManager.AddOperation(repo,CloningOperation.TYPE);
    }
}